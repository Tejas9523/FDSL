practical 1  

Marks

# function for getting marks in array
def getdata(arr,n):
    for i in range(n):
        marks=int(input("Enter marks of student - "))
        arr.append(marks)
    #print(arr)

# function fr calculating an average    
def avg(arr,n):
    sum1=0
    for i in range(n):
        marks=arr[i]
        sum1=sum1+arr[i]
    average=sum1/n
    print("Average is - ",average)

# function for counting absent students
def absent(arr,n):
    ab=0
    for i in range(n):
        if(arr[i]<=0):
            ab=ab+1
    print("Number of Present students - ",n-ab)
    print("Number of Absent students - ",ab)

# function for calculating min and max marks            
def min_max(arr,n):
    mn=arr[0]
    mx=arr[0]
    for i in range(n):
        if(arr[i]<=mn):
            mn=arr[i]
        elif(arr[i]>=mx):
            mx=arr[i]
    print("Highest score is ",mx)
    print("Lowest score is ",mn)

# function to calculate marks with highest frequency
def most_freq_marks(student_marks , student_count ):
    Max = 0
    temp = []
    for i in student_marks:
        if(student_marks.count(i) > Max):
            Max = student_marks.count(i)
    for j in student_marks:
        if(student_marks.count(j) == Max and (j not in temp)):
            temp.append(j)
    if(Max == 1):
        print("\nThere are no elements with repetative entries")
    else:
        print(temp)


# *****************************main******************************

n=int(input("Enter a No of student - "))
arr=[]

ans=True
while(ans):
    print("\n1.Enter marks")
    print("2.Average")
    print("3.Absent student")
    print("4.Minimum and Maximum marks")
    print("5.Frequency count")
    print("6.Exit")
    ch=int(input("\nEnter correct choice - "))
    if(ch==1):
        getdata(arr,n);
    elif(ch==2):
        avg(arr,n);
    elif(ch==3):
        absent(arr,n);
    elif(ch==4):
        min_max(arr,n);
    elif(ch==5):
        most_freq_marks(arr, n);
    elif(ch==6):
        ans=False
    else:
        print("\nEnter correct choice ...!!!")


practical 2
String


# print length of a string
def length():
    print("\nLength of ",string ," is ",len(string))

# print occurence of character
def frq():
    n=input("\nEnter a character to check occurence - ")
    print("frequency of ",n," is ",string.count(n))

# to check palindrome or not 
def chk():
    if(string==string[::-1]):
        print("\nString is Palindrome")
    else:
        print("\nString is Not Plaindrome")

# find index of given substring
def sub():
    sub=input("\nEnter a substring - ")
    print("Index of ",sub," is ",string.index(sub))

# print charatcter occurence count
def ocr():
    for i in string:
        print(i," - ",string.count(i))



# input string from user
string=input("\nEnter string - ")

ans=True
while(ans):
    print("\n1.Length")
    print("2.Character occurence")
    print("3.Check Palindrome or not !")
    print("4.Substring index")
    print("5.Exit")
    ch=int(input("\nEnter correct choice - "))
    if(ch==1):
        length();
    elif(ch==2):
        frq();
    elif(ch==3):
        chk();
    elif(ch==4):
        ocr();
    elif(ch==5):
        ans=False
    else:
        print("\nEnter correct choice ...!!!")


practical 3

Matrix


#function to print matrix
def print_matrix(matrix ,  row , col):
    for i in range(row):
        for j in range(col):
            print(matrix[i][j] , end = "  ")
        print()
    print("---------------------------***----------------------------")

#function to input a matirx
def input_matrix(matrix , row , col):
    for i in range(row):
        matrix.append([])
        for j in range(col):
            m = int(input())
            matrix[i].append(m)

    return matrix


# function for Matrix transpose        
def trans(matrix , row , col):
    tran_matrix = []
    for i in range(row):
        tran_matrix.append([])
        for j in range(col):
            tran_matrix[i].append(matrix[j][i])
    print("Transpose :")
    print_matrix(tran_matrix , row , col)

# matrix addition function        
def add(matrix_1,matrix_2,row,col):
    add=[]
    for i in range(row):
        add.append([])
        for j in range(col):
            add[i].append(matrix_1[i][j] + matrix_2[i][j])
    print("Addition :")
    print_matrix(add , row , col)
    

# matrix substraction function        
def sub(matrix_1,matrix_2,row,col):
    add=[]
    for i in range(row):
        add.append([])
        for j in range(col):
            add[i].append(matrix_1[i][j] - matrix_2[i][j])
    print("Substraction :")
    print_matrix(add , row , col)

# matrix multiplication function        
def mul(matrix_1,matrix_2,row_1,row_2,col_1,col_2):
    multi_matrix = []
    for h in range(row_1):
        multi_matrix.append([])
        for k in range(col_2):
            multi_matrix[h].append(0)
    
    for i in range(row_1):
        for j in range(col_2):
            for m in range(row_2):
                multi_matrix[i][j] += matrix_1[i][m] * matrix_2[m][j]
    print("Multiplication :")
    print_matrix(multi_matrix , row_1, col_2)

matrix_1=[]
matrix_2=[]


# Matrix_1 get from user
print("\nMatrix 1 : ")
row_1=int(input("Enter number of rows - "))
col_1=int(input("Enter number of column - "))
print("Enter elements of 1st matrix - ")
input_matrix(matrix_1 , row_1 , col_1)
print("\nFirst Matrix is - ")
print_matrix(matrix_1 ,  row_1 , col_1)


# Matrix_2 get from user
print("\nMatrix 2 : ")
row_2=int(input("Enter number of rows - "))
col_2=int(input("Enter number of column - "))
print("Enter elements of 2nd matrix - ")
input_matrix(matrix_2 , row_2 , col_2)
print("\nSecond Matrix is - ")
print_matrix(matrix_2 ,  row_2 , col_2)

ans=True
while(ans):
    print("\n1.Transpose matrix_1")
    print("2.Transpose matrix_1")
    print("3.Addition")
    print("4.Substraction")
    print("5.Multiplication")
    print("6.Exit")
    ch=int(input("\nEnter correct choice - "))

    if(ch==1):
        #Transpose
        trans(matrix_1,row_1,col_1)
    elif(ch==2):
        trans(matrix_2,row_2,col_2)
    elif(ch==3):
        #Addition 
        if(row_1 == row_2 and col_1 == col_2):
            add(matrix_1,matrix_2,row_1,col_1)
        else:
            print("\nInvalid dimensions of matrix for this operation")
    elif(ch==4):
        #Substraction 
        if(row_1 == row_2 and col_1 == col_2):
            sub(matrix_1,matrix_2,row_1,col_1)
        else:
            print("\nInvalid dimensions of matrix for this operation")
    elif(ch==5):
        #Multiplication
        if(col_1==row_2):
            mul(matrix_1,matrix_2,row_1,row_2,col_1,col_2)
        else:
            print("\nInvalid dimensions of matrix for this operation")
    elif(ch==6):
        ans=False
    else:
        print("\nPlease Enter correct choice ...!!!")



practical 4

Ternary search


# Function to perform Ternary Search
def Ternary_Search(members, target_roll_number, low, high):
    if high >= low:
        # Calculate the two mid-points to divide the list into three parts
        mid1 = low + (high - low) // 3
        mid2 = high - (high - low) // 3

        # Check if target_roll_number is at mid1 or mid2
        if members[mid1][0] == target_roll_number:
            return members[mid1]
        if members[mid2][0] == target_roll_number:
            return members[mid2]

        # If the target is smaller than the first mid-point, search in the left part
        if target_roll_number < members[mid1][0]:
            return Ternary_Search(members, target_roll_number, low, mid1 - 1)

        # If the target is larger than the second mid-point, search in the right part
        elif target_roll_number > members[mid2][0]:
            return Ternary_Search(members, target_roll_number, mid2 + 1, high)

        # Otherwise, search in the middle part
        else:
            return Ternary_Search(members, target_roll_number, mid1 + 1, mid2 - 1)

    # If the target is not found, return None
    return None

# Function to display the list of members
def display_members(members):
    print("Club Members (sorted by roll number):")
    for roll_number, name in members:
        print(f"Roll No: {roll_number}, Name: {name}")

# Function to add a new member to the club
def add_member(members, roll_number, name):
    members.append((roll_number, name))
    members.sort()  # Sorting the members by roll number

# Main function
def main():
    # List to store club members as tuples of (roll_number, name)
    members = []

    # Add some members to the club
    add_member(members, 101, "Alice")
    add_member(members, 103, "Charlie")
    add_member(members, 102, "David")
    add_member(members, 105, "Bob")
    add_member(members, 104, "Eve")

    # Display the sorted club members
    display_members(members)

    # Ask user for a roll number to search
    target_roll_number = int(input("\nEnter roll number to search: "))

    # Perform Ternary Search to find the member
    result = Ternary_Search(members, target_roll_number, 0, len(members) - 1)

    # Display the search result
    if result:
        print(f"\nFound: Roll No: {result[0]}, Name: {result[1]}")
    else:
        print(f"\nStudent with roll number {target_roll_number} is not a member of the club.")

# Run the program
if __name__ == "__main__":
    main()




practical 5

BS SS


# function for selection sort
def ssort(arr,l):
    print("Before selection sort - ",arr)
    for i in range(l):
        m=i
        for j in range(i+1,l):
            if(arr[j]<arr[m]):
                m=j
        arr[i],arr[m]=arr[m],arr[i]
    print("After selection sort - ",arr)


# function for bubble sort
def bsort(arr,l):
    print("Before Bubble  sort - ",arr)
    for i in range(l-1):
        for j in range(l-i-1):
            if(arr[j]>arr[j+1]):
                arr[j],arr[j+1]=arr[j+1],arr[j]
    print("After Bubble sort - ",arr)


# functio for getting data
def get(marks , n):
    for i in range(n):
        e=int(input("Enter element : "))
        marks.append(e)


        
k=1
while(k==1):
    marks=[]
    print("\nSelect option to perform : ")
    print("1) Selection sort")
    print("2) Bubble sort")
    print("3) Exit")
    ch=int(input("Enter choice - "))
    if(ch==1):
        n=int(input("Enter no elements - "))
        get(marks ,n)
        ssort(marks,n)
    elif(ch==2):
        n=int(input("Enter no elements - "))
        get(marks ,n)
        bsort(marks,n)
    elif(ch==3):
        k=0
    else:
        print("Please enter correct choice...!")



practical 6 

QS



def partition(array, low, high):
  pivot = array[high]
  i = low - 1
  for j in range(low, high):
    if array[j] <= pivot:
      i = i + 1
      (array[i], array[j]) = (array[j], array[i])
  (array[i + 1], array[high]) = (array[high], array[i + 1])
  return i + 1

def quickSort(array, low, high):
  if low < high:
    pi = partition(array, low, high)
    quickSort(array, low, pi - 1)
    quickSort(array, pi + 1, high)

n=int(input("Enter no of student - "))
data = []
for i in range(n):
    data.append(float(input("Enter percentage - ")))
print("Unsorted Array : ",data)

size = len(data)

quickSort(data, 0, size - 1)
print('Sorted Array in Ascending Order : ',data)

end=size-1
for i in range(5):
    print("Top ",i+1," scores - ",data[end])
    end -= 1



PRACTICAL 7

PINNACLE


#include<iostream>
using namespace std;
class sll
{
struct node
{
int prn;
char name[10];
node *next;
}*start;
public:
sll()
{
start=NULL;
}
void create();
void display();
void insert_beginning();
void insert_end();
void insert_mid();
void del_beginning();
void del_end();
void del_mid();
int compute();
void concatenate(sll obj2);
};
void sll::create()
{
node *temp;
node *curr;
int prn;
char name;
int ans;
do{
temp=new node;
temp->next=NULL;
cout<<"Enter PRN number:"<<endl; cin>>temp->prn;
cout<<"Enter name:"<<endl;
cin>>temp->name;
if(start==NULL)
{
start=temp;
curr=temp;
}
else
{
curr->next=temp;
curr=temp;
}
cout<<"Do you want to add new node? 1 for yes"<<endl; cin>>ans;
}while(ans==1);
}
void sll::display()
{
node *t;
if(start==NULL)
{
cout<<"Club is emty"<<endl;
return;
}
else{
t=start;
while(t!=NULL)
{
cout<<t->prn<<" "<<t->name<<"->";
t=t->next;
}
cout<<"NULL";
}
}
void sll::insert_beginning()
{
node *temp;
temp =new node;
temp->next=NULL;cout<<"Enter PRN number:"<<endl; cin>>temp->prn;
temp->next=NULL;cout<<"Enter name:"<<endl; cin>>temp->name;
if(start==NULL)
{
start=temp;
}
else{
temp->next;
start=temp;
}
}
void sll::insert_end()
{
node *temp, *last;
temp =new node;
temp->next=NULL;
cout<<"Enter PRN number:"<<endl; cin>>temp->prn;
temp->next=NULL; cout<<"Enter name:"<<endl;
cin>>temp->name;
if(start==NULL)
{
start=temp;
}
else{
last=start;
while(last->next!=NULL)
{
last=last->next;
}
last->next=temp;
}
}
void sll::insert_mid()
{
node *temp;
node *curr;
int loc;
cout<<"\nENter location after which we want to insert:"<<endl; cin>>loc;
temp=new node;
temp->next=NULL;
cout<<"Enter PRN number:"<<endl; cin>>temp->prn;
cout<<"Enter name:"<<endl;
cin>>temp->name;
curr=start;
for(int i=1;i<loc;i++)
{
curr=curr->next;
}
temp->next=curr->next;
curr->next=temp;
}
void sll::del_beginning()
{
node *temp;
if(start==NULL)
{
cout<<"Club is empty"<<endl;
}
else{
temp=start;
start=start->next;
cout<<temp->prn<<"\tfirst element deleted"<<endl; delete temp;
}
}
void sll::del_end()
{
node *temp,*prev;
if(start==NULL)
{
cout<<"Club is empty"<<endl;
}
else{
temp=start;
while(temp->next==NULL)
{
prev=temp;
temp=temp->next;
}
cout<<temp->prn<<"\t last element deleted"<<endl; delete temp;
prev->next=NULL;
}
} void sll:: del_mid()
{
node *temp;
node *curr;
int loc;
cout<<"Enter location of node which you want to delete"<<endl; cin>>loc;
curr=start;
for(int i=1;i<loc;i++)
{
temp=curr;
curr=curr->next;
}
temp->next=curr->next;
cout<<curr->prn<<"\t has been deleted"<<endl; delete curr;
}
int sll::compute()
{
node *temp;
int count=0;
if(start==NULL)
{
cout<<"\nClub is empty"<<endl;
}
temp=start;
while(temp!=NULL)
{
count++;
temp=temp->next;
}
cout<<"Total number of members are \t"<<endl; return 0;
}
void sll::concatenate(sll obj2)
{
node *temp, *last;
last=obj2.start;
if(last==NULL)
{
cout<<"\n List 2 is empty"<<endl;
return;
}
temp=start;
while(temp->next!=NULL)
{
temp=temp->next;
}
temp->next=last;
cout<<"\n After concatenation:";
}
int main()
{
sll obj;
int ch;
do{ cout<<"\n1. Create \n2.Insert at beginning \n3.Insert at end \n4.INsert after position \n5 Display list \n6 Delete first element \n7 Delete last element \n8 DElete Member \n9 Find total number of members \n10 concate lists \n0.Exit \n Enter your choice:"; 
cin>>ch;
switch(ch)
{
case 1:
obj.create();
obj.display();
break;
case 2:
obj.insert_beginning();
obj.display();
break;
case 3:
obj.insert_end();
obj.display();
break;
case 4:
obj.insert_mid();
obj.display();
break;
case 5:
obj.display();
break;
case 6:
obj.del_beginning();
obj.display();
break;
case 7:
obj.del_end();
obj.display();
break;
case 8:
obj.del_mid();
obj.display();
break;
case 9:
obj.compute();
obj.display();
break;
case 10:
{
sll obj2,obj3;
cout<<"\n List1:"<<endl;
obj2.create();
cout<<"\n List2:"<<endl;
obj3.create();
obj2.concatenate(obj3);
obj.display();
break;
}
}
}while(ch!=0);
cout<<"\n End of the program"<<endl;
return 0;
}




practical 8

1'S 2'S



#include <iostream>
#include <string>
using namespace std;

// Node structure for the doubly linked list
struct Node {
    int bit; // stores binary digit (0 or 1)
    Node* next;  // pointer to the next node
    Node* prev;  // pointer to the previous node
};

// Class for the binary number using doubly linked list
class BinaryNumber {
private:
    Node* head;  // head pointer to the doubly linked list

public:
    // Constructor
    BinaryNumber() {
        head = nullptr;
    }

    // Function to insert a binary number
    void insertBinary(string bin) {
        for (char ch : bin) {
            Node* newNode = new Node();
            newNode->bit = ch - '0';  // Convert char to integer (0 or 1)
            newNode->next = nullptr;
            newNode->prev = nullptr;

            // If the list is empty, make the new node the head
            if (!head) {
                head = newNode;
            } else {
                // Otherwise, append the node at the end of the list
                Node* temp = head;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = newNode;
                newNode->prev = temp;
            }
        }
    }

    // Function to display the binary number
    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->bit;
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to compute the 1's complement of the binary number
    void onesComplement() {
        Node* temp = head;
        while (temp) {
            temp->bit = (temp->bit == 0) ? 1 : 0;  // Flip 0 to 1 and 1 to 0
            temp = temp->next;
        }
    }

    // Function to compute the 2's complement of the binary number
    void twosComplement() {
        onesComplement();  // First, get the 1's complement

        // Now add 1 to the least significant bit (rightmost bit)
        Node* temp = head;
        bool carry = true;

        while (temp) {
            if (carry) {
                if (temp->bit == 1) {
                    temp->bit = 0;  // Flip 1 to 0 and carry forward
                } else {
                    temp->bit = 1;  // Add 1 to 0
                    carry = false;  // No further carry needed
                }
            }
            temp = temp->next;
        }
    }

    // Function to add another binary number
    BinaryNumber addBinary(BinaryNumber& num2) {
        Node* temp1 = head;
        Node* temp2 = num2.head;
        BinaryNumber result;
        Node* resultHead = nullptr;
        Node* resultTail = nullptr;

        bool carry = 0;

        // Perform binary addition bit by bit
        while (temp1 != nullptr || temp2 != nullptr || carry) {
            int bit1 = (temp1 != nullptr) ? temp1->bit : 0;
            int bit2 = (temp2 != nullptr) ? temp2->bit : 0;

            // Binary addition rule: sum of bits and carry
            int sum = bit1 + bit2 + carry;
            carry = sum / 2;  // Carry for next higher bit
            int resultBit = sum % 2;  // Current bit

            // Create a new node for the result
            Node* newNode = new Node();
            newNode->bit = resultBit;
            newNode->next = nullptr;
            newNode->prev = resultTail;

            // Append the node to the result
            if (resultTail != nullptr) {
                resultTail->next = newNode;
            } else {
                resultHead = newNode;
            }
            resultTail = newNode;

            // Move to the next nodes
            if (temp1 != nullptr) temp1 = temp1->next;
            if (temp2 != nullptr) temp2 = temp2->next;
        }

        result.head = resultHead;
        return result;
    }
};

// Main function to demonstrate the program
int main() {
    BinaryNumber num1, num2, sum;

    // Insert binary numbers
    cout << "Enter the first binary number: ";
    string bin1;
    cin >> bin1;
    num1.insertBinary(bin1);

    cout << "Enter the second binary number: ";
    string bin2;
    cin >> bin2;
    num2.insertBinary(bin2);

    cout << "\nFirst Binary Number: ";
    num1.display();

    cout << "Second Binary Number: ";
    num2.display();

    // Compute and display 1's complement
    cout << "\n1's complement of the first number: ";
    num1.onesComplement();
    num1.display();

    // Compute and display 2's complement
    cout << "2's complement of the first number: ";
    num1.twosComplement();
    num1.display();

    // Add two binary numbers
    cout << "\nAdding the two binary numbers: ";
    sum = num1.addBinary(num2);
    sum.display();

    return 0;
}



practical 9

PALINDROME


#include<iostream>
#include<string.h>
#define max 50
using namespace std;
class STACK
{
private:
char a[max];
int top;
public:
STACK()
{
top=-1;
}
void push(char);
void reverse();
void convert(char[]);
void palindrome();
};
void STACK::push(char c)
{
top++;
a[top] = c;
a[top+1]='\0';
cout<<endl<<c<<" is pushed on stack ...";
} void STACK::reverse()
{
char str[max];
cout<<"\n\nReverse string is : ";
for(int i=top,j=0; i>=0; i--,j++)
{
cout<<a[i];
str[j]=a[i];
}
cout<<endl;
}
void STACK::convert(char str[])
{
int j,k,len = strlen(str);
for(j=0, k=0; j<len; j++)
{
if( ( (int)str[j] >= 97 && (int)str[j] <=122 ) || ( (int)str[j] >= 65 &&
(int)str[j] <=90 ))
{
if( (int)str[j] <=90 )
{
str[k] = (char)( (int)str[j] + 32 );
}else
{
str[k] = str[j];
}
k++;
}
}
str[k]='\0';
cout<<endl<<"Converted String : "<<str<<"\n";
}
void STACK::palindrome()
{
char str[max];
int i,j;
for(i=top,j=0; i>=0; i--,j++)
{
str[j]=a[i];
}
str[j]='\0';
if(strcmp(str,a) == 0)
cout<<"\n\nString is palindrome...";
else
cout<<"\n\nString is not palindrome...";
}
int main()
{
STACK stack;
char str[max];
int i=0;
cout<<"Enter string to be reversed and check is it palindrome or not :";
cin.getline(str , 50);
stack.convert(str);
while(str[i] != '\0')
{
stack.push(str[i]);
i++;
}
stack.palindrome(); stack.reverse();
}



practical 10


/*
        Implement C++ program for expression conversion as infix to
    postfix and its evaluation using stack based on given conditions:
        1. Operands and operator, both must be single character.
        2. Input Postfix expression must be in a desired format.
        Only '+' , '-' , '*', '/' operators are expected
*/

#include<iostream>
using namespace std;

class Stack
{
    public:
        //member functions
        char *arr;
        int size;
        int top;

        Stack(int n)
        {
            size = n;
            arr = new char[size];
            top = -1;
        }

        void push(char data)
        {
            //check full
            if(top == size-1)
            {
                cout << "Stack Overflow" << endl;
                return;
            }
            else
            {
                arr[++top] = data;
            }
        }

        void pop()
        {
            //check empty
            if(top == -1)
            {
                cout << "Stack Underflow" << endl;
            }
            else
            {
                top--;
            }
        }

        char topp()
        {
            //check empty
            if(top == -1)
            {
                cout << "Stack Underflow" << endl;
            }
            else 
                return arr[top];
        }

        bool isempty()
        {
            if(top == -1) return true;
            else return false;
        }
};

int pref(char ch)
{
    if(ch == '*' || ch == '/') return 2;
    else if(ch == '+' || ch == '-') return 1;
}

void infix_postfix(string infix)
{
    Stack st(infix.length());
    string postfix = "";
    for(int i = 0 ; i < infix.length() ; i++)
    {
        char ch = infix[i];
        //if '(' push into stack
        if(ch == '('){
            st.push(ch);
        }
        //if operand is traversed print it
        else if((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z'))
            postfix += ch; 
        //if ')' is traversed
        else if(ch == ')'){
            while(ch != '('){
                postfix += st.topp();
                st.pop();
            }
            //to remove opening bracket
            st.pop();
        }
        //if operator is traversed
        if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
            if(st.isempty()){
                st.push(ch);
            }
            else{
                while(!st.isempty() && pref(ch) <= pref(st.topp())){
                    postfix += st.topp();
                    st.pop();
                }
                st.push(ch);
            }
        }
    }
    while(!st.isempty()){
        postfix += st.topp();
        st.pop();
    }
    cout << "Postfix : " << postfix;
}

int main(){
    string temp = "a+b*c/z";
    infix_postfix(temp);
    
    return 0;
}



practical 11


/*
        Queues are frequently used in computer programming, and a
    typical example is the creation of a job queue by an operating
    system. If the operating system does not use priorities, then the
    jobs are processed in the order they enter the system. Write C++
    program for simulating job queue. Write functions to add job and
    delete job from queue
*/

#include<iostream>
using namespace std;

#define MAX 100

class job
{
    public:
        int priority;
        int job_id;
        friend class Queue;
        job()
        {
            priority = 0;
            job_id = 0;
        }

        void get_data()
        {
            cout << "Enter Job I'd : ";
            cin >> job_id;
            cout << "Enter priority : ";
            cin >> priority;
            cout << endl;
        }
};

class Queue
{
    public:
        int size;
        int front;
        int rear;
        job queue[MAX];

        Queue(int n)
        {
            size = n;
            front = -1;
            rear = -1;
        }

        void insert()
        {
            if(isfull())
            {
                cout << "Queue Overflow" << endl;
                return;
            }
            job temp;
            temp.get_data();
            if(rear == -1)
            {
                front = 0;
                queue[++rear] = temp;
            }
            else
            {
                int iter = rear;
                while(iter >= front && queue[iter].priority > temp.priority)
                {
                    queue[iter+1] = queue[iter];
                    iter--;
                }
                queue[++iter] = temp;
                rear++;
            }
        }

        void pop()
        {
            if(isempty())
            {
                cout << "Queue Underflow" << endl;
                return;
            }

            if(front == rear)
            {
                front = -1;
                rear = -1;
            }
            else
                front++;
        }

        bool isfull()
        {
            if(front == 0 && rear == size -1)
                return 1;
            return 0;
        }

        bool isempty()
        {
            if(front == -1)
                return 1;
            return 0;
        }

        void frontt()
        {
            if(isempty())
            {
                cout << "Queue Underflow" << endl;
                return;
            }

            cout << "Job I'd : " << queue[front].job_id << endl;
            cout << "Priority : " << queue[front].priority << endl;
        }
};


int main()
{
    cout << "\n\n***************** JOB QUEUE *****************\n\n";
    int n;
    cout << "Enter total number of jobs : ";
    cin >> n;
    Queue q(n);
    bool ans = true;
    int choice;
    while(ans)
    {
        cout << "\n-------------------- MENU --------------------";
        cout << "\n1. Insert Job";
        cout << "\n2. Delete Job";
        cout << "\n3. Display highest priroity job";
        cout << "\n4. Exit";
        
        cout << "\n\nEnter your choice : ";
        cin >> choice;

        switch (choice)
        {
            case 1:
                q.insert();
                break;
            case 2:
                q.pop();
                cout << "\nJob Deleted Successfully";
                break;
            case 3:
                q.frontt();
                break;
            case 4:
                ans = false;
                break;
            default:
                cout << "Enter valid choice ...!\n";
                break;
        }
    }

    return 0;
}



practical 12


#include<iostream>
using namespace std;

class Deque
{
    public:
        //data members
        int *arr;
        int front;
        int rear;
        int size;

        //initialize data members
        Deque(int n)
        {
            size = n;
            arr = new int[size];
            rear = front = -1;
        }

        void push_front(int data)
        {
            //chack full
            if(isfull())
            {
                cout << "Queue Overflow" << endl;
                return;
            }
            else if(is_empty())
            {
                front = rear = 0;
                arr[front] = data;
            }
            else if(front == 0 && rear != size - 1)
            {
                front = size - 1;
                arr[front] = data;
            }
            else
            {
                front--;
                arr[front] = data;
            }
            cout << "Element Pushed Successfully." << endl;
        }

        void push_rear(int data)
        {
            //chack full
            if(isfull())
            {
                cout << "Queue Overflow" << endl;
                return;
            }
            else if(is_empty())
            {
                front = rear = 0;
                arr[rear] = data;
            }
            else if(rear == size-1 && front != 0)
            {
                rear = 0;
                arr[rear] = data;
            }
            else
            {
                rear++;
                arr[rear] = data;
            }
            cout << "Element Pushed Successfully." << endl;
        }

        void pop_front()
        {
            //check empty
            if(is_empty())
            {
                cout << "Queue Underflow" << endl;
                return;
            }
            else if(front == rear)
            {
                front = rear = -1;
            }
            else if(front == size - 1)
            {
                front = 0;
            }
            else 
            {
                front++;
            }
            cout << "Element Poped Successfully." << endl;
        }

        void pop_rear()
        {
            //check empty
            if(is_empty())
            {
                cout << "Queue Underflow" << endl;
                return;
            }
            else if(front == rear)
            {
                front = rear = -1;
            }
            else if(rear == 0)
            {
                rear = size - 1;
            }
            else 
            {
                rear--;
            }
            cout << "Element Poped Successfully." << endl;
        }

        bool isfull()
        {
            if((front == 0 && rear == size - 1) || (rear == ((front - 1) % (size - 1))))
                return true;
            else 
                return false;
        }

        bool is_empty()
        {
            if(front == -1)
                return true;
            else
                return false;
        }

        int forward()
        {
            //check empty
            if(is_empty())
                return -1;
            else 
                return arr[front]; 
        }

        int backward()
        {
            //check empty
            if(is_empty())
                return -1;
            else
                return arr[rear];
        }

};

int main()
{
    cout << "****************** DEQUE ******************\n\n";
    cout << "Enter Total number of Entries : ";
    int n;
    cin >> n;
    Deque dq(n);
    int choice;
    int data;
    
    bool ans = true;
    while(ans)
    {
        cout << "\n---------------------- MENU ----------------------";
        cout << "\n1. Push Front";
        cout << "\n2. Push Back";
        cout << "\n3. Pop Front";
        cout << "\n4. Pop Back";
        cout << "\n5. Check Isfull";
        cout << "\n6. Check IsEmpty";
        cout << "\n7. Front element";
        cout << "\n8. Rear Element";
        cout << "\n9. Exit";
        cout << "\n\nEnter your choice : ";
        cin >> choice;

        switch (choice)
        {
            case 1:
                cout << "Enter Element : ";
                cin >> data;
                dq.push_front(data);
                break;
            case 2:
                cout << "Enter Element : ";
                cin >> data;
                dq.push_rear(data);
                break;
            case 3:
                dq.pop_front();
                break;
            case 4:
                dq.pop_rear();
                break;
            case 5:
                if(dq.isfull()) cout << "Deque is Full\n";
                else cout << "Deque is not full\n";
                break;
            case 6:
                if(dq.is_empty()) cout << "Deque is empty\n";
                else cout << "Deque is not empty\n";
                break;
            case 7:
                cout << "Front : " << dq.forward() << endl; 
                break;
            case 8:
                cout << "Rear : " << dq.backward() << endl;
                break;
            case 9:
                ans = false;
                break;

            default:
                cout << "Enter valid choice ...!\n";
                break;
        }
    }
    return 0;
}



practical 13




/*
        Pizza parlor accepting maximum M orders. Orders are served in
        first come first served
        basis. Order once placed cannot be cancelled. 
        Write C++ program to simulate the system using circular queue using array.
*/

#include<iostream>
using namespace std;

class circular_queue
{
    public:
        //data members
        int *arr;
        int front;
        int rear;   
        int size;

        circular_queue(int n)
        {
            size = n;
            arr = new int[size];
            front = rear = -1;
        }

        void push(int data)
        {
            //check isfull
            if(is_full())
            {
                cout << "Maximum Orders Reached ...!" << endl;
                return;
            }
            else if(is_empty())
            {
                front = rear = 0;
                arr[rear] = data;
            }
            else if(rear == size - 1 && front != 0)
            {
                rear = 0;
                arr[rear] = data;
            }
            else
            {
                rear++;
                arr[rear] = data;
            }
            cout << "Order Placed Successfully." << endl;
        }

        void pop()
        {
            //check empty
            if(is_empty())
            {
                cout << "No Orders Placed to Cancel ...!" << endl;
                return;
            }
            int ans = arr[front];
            if(front == rear)
            {
                front = rear = -1;
            }
            else if(front == size - 1)
            {
                front = 0;
            }
            else 
            {
                front++;
            }
            cout << "Order No. " << ans <<  " Cancelled Successfully." << endl;
        }

        bool is_empty()
        {
            if(front == -1)
                return true;
            else 
                return false;
        }

        bool is_full()
        {
            if((front == 0 && rear == size - 1) || (rear == ((front-1)%(size - 1))))
                return true;
            else 
                return false;

        }

        int forward()
        {
            if(is_empty())
                return -1;
            else
                return arr[front];

        }
};

int main()
{
    cout << "********************* PIZZA PARLOUR *********************\n\n";
    bool ans = true;
    int choice;
    int data;
    int m;
    cout << "Enter Total Number of Orders : ";
    cin >> m;
    circular_queue cq(m);

    while(ans)
    {
        cout << "\n--------------------- MENU ---------------------";
        cout << "\n1. To Place Order";
        cout << "\n2. To Cancel Order";
        cout << "\n3. To Check whether all Orders are full";
        cout << "\n4. To Check whether Order Queue is Empty";
        cout << "\n5. Display Front Order Number";
        cout << "\n6. Exit";

        cout << "\n\nEnter your choice : ";
        cin >> choice;

        switch (choice)
        {
            case 1:
                cout << "Enter Order Number : ";
                cin >> data;
                cq.push(data);
                break;
            case 2:
                cq.pop();
                break;
            case 3:
                if(cq.is_full())
                    cout << "Yes , All Orders are full." << endl;
                else 
                    cout << "No , All Orders aren't full." << endl;
                break;
            case 4:
                if(cq.is_empty())
                    cout << "Yes , Order Queue is Empty.";
                else
                    cout << "No , Order Queue is not Empty.";
                break;
            case 5:
                data = cq.forward();
                if(data == -1)
                    cout << "Order Queue is Empty." << endl;
                else 
                    cout << "Front Order Number : " << data;
                break;
            case 6:
                ans = false;
                break;
        
            default:
                cout << "Enter valid choice ...!" << endl;
                break;
        }
    }
    return 0;
}
